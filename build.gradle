plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'

    id 'jacoco'
}

group = 'toy'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.8'

//  테스트결과 리포트를 저장할 경로 변경
//  default는 "$/jacoco"
//  reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    dependsOn(test)

    reports {
        // 원하는 리포트를 켜고 끌 수 있습니다.
        html.required = true
        xml.required = false
        csv.required = true

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "toy/board/domain/**/Q**.*",

                        "toy/board/BoardApplication.*",
                        "toy/board/service/mail/MailService.*",
                        "toy/board/domain/base/**.*",

                        "toy/board/config/init/**.*",
                ])
            }))
        }
//  각 리포트 타입 마다 리포트 저장 경로를 설정할 수 있습니다.
//  html.destination file("$buildDir/jacocoHtml")
//  xml.destination file("$buildDir/jacoco.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            // 'element'가 없으면 프로젝트의 전체 파일을 합친 값을 기준으로 합니다.
            // 위의 리포트에서 'Total'로 표시된 부분입니다.
            limit {
                // 'counter'를 지정하지 않으면 default는 'INSTRUCTION'
                // 'value'를 지정하지 않으면 default는 'COVEREDRATIO'
                minimum = 0.80
            }
        }

        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.90
            }

            // 라인 커버리지를 최소한 80% 만족시켜야 합니다.
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            // 빈 줄을 제외한 코드의 라인수를 최대 200라인으로 제한합니다.
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 200
            }
        }

    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'mysql:mysql-connector-java:8.0.32'

    //spring3.0+ Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    testImplementation 'junit:junit:4.13.1'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    //쿼리를 볼 수 있도록 하는 라이브러리. 버전을 입력하는 이유는 스프링 디펜던시에 등록이 안되어 있기 때문이다.
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6'

    // Spring Security 적용
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // mail
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail'

    // Bean Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'

    // redis 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    // test를 위한 embedded redis
    testImplementation group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2'

    runtimeOnly 'com.h2database:h2'


    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(
            'test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification'
    )

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}